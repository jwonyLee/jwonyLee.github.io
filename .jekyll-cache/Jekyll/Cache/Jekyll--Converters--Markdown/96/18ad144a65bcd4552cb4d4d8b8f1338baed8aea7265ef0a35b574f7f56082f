I"<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">class</span> <span class="kt">Person</span> <span class="p">{</span>
    <span class="k">let</span> <span class="nv">name</span><span class="p">:</span> <span class="kt">String</span>
    <span class="nf">init</span><span class="p">(</span><span class="nv">name</span><span class="p">:</span> <span class="kt">String</span><span class="p">)</span> <span class="p">{</span> <span class="k">self</span><span class="o">.</span><span class="n">name</span> <span class="o">=</span> <span class="n">name</span> <span class="p">}</span>
    <span class="k">var</span> <span class="nv">apartment</span><span class="p">:</span> <span class="kt">Apartment</span><span class="p">?</span>
    <span class="kd">deinit</span> <span class="p">{</span> <span class="nf">print</span><span class="p">(</span><span class="s">"</span><span class="se">\(</span><span class="n">name</span><span class="se">)</span><span class="s"> is being deinitialized"</span><span class="p">)</span> <span class="p">}</span>
<span class="p">}</span>

<span class="kd">class</span> <span class="kt">Apartment</span> <span class="p">{</span>
    <span class="k">let</span> <span class="nv">unit</span><span class="p">:</span> <span class="kt">String</span>
    <span class="nf">init</span><span class="p">(</span><span class="nv">unit</span><span class="p">:</span> <span class="kt">String</span><span class="p">)</span> <span class="p">{</span> <span class="k">self</span><span class="o">.</span><span class="n">unit</span> <span class="o">=</span> <span class="n">unit</span> <span class="p">}</span>
    <span class="k">var</span> <span class="nv">tenant</span><span class="p">:</span> <span class="kt">Person</span><span class="p">?</span>
    <span class="kd">deinit</span> <span class="p">{</span> <span class="nf">print</span><span class="p">(</span><span class="s">"Apartment </span><span class="se">\(</span><span class="n">unit</span><span class="se">)</span><span class="s"> is being deinitialized"</span><span class="p">)</span> <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">var</span> <span class="nv">john</span><span class="p">:</span> <span class="kt">Person</span><span class="p">?</span>
<span class="k">var</span> <span class="nv">unit4A</span><span class="p">:</span> <span class="kt">Apartment</span><span class="p">?</span>
</code></pre></div></div>

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">john</span> <span class="o">=</span> <span class="kt">Person</span><span class="p">(</span><span class="nv">name</span><span class="p">:</span> <span class="s">"John Appleseed"</span><span class="p">)</span>
<span class="n">unit4A</span> <span class="o">=</span> <span class="kt">Apartment</span><span class="p">(</span><span class="nv">unit</span><span class="p">:</span> <span class="s">"4A"</span><span class="p">)</span>
</code></pre></div></div>

<p><img src="https://docs.swift.org/swift-book/_images/referenceCycle01_2x.png" alt="referenceCycle01" /></p>

<p>특정 <code class="language-plaintext highlighter-rouge">Person</code> 인스턴스와 <code class="language-plaintext highlighter-rouge">Apartment</code> 인스턴스를 만들고 할당하면 위 그림과 같이 강력한 참조가 생성된다. 이렇게 만든 인스턴스를 연결하여 <code class="language-plaintext highlighter-rouge">Person</code> 인스턴스가 아파트를 갖고 <code class="language-plaintext highlighter-rouge">Apartment</code> 인스턴스에 임차인이 있도록 한다.</p>

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">john</span><span class="o">!.</span><span class="n">apartment</span> <span class="o">=</span> <span class="n">unit4A</span>
<span class="n">unit4A</span><span class="o">!.</span><span class="n">tenant</span> <span class="o">=</span> <span class="n">john</span>
</code></pre></div></div>

<p><img src="https://docs.swift.org/swift-book/_images/referenceCycle02_2x.png" alt="referenceCycle02" /></p>

<p>이렇게 두 인스턴스를 연결하면 두 인스턴스 간에 강한 순환 참조가 생성된다. 그래서 <code class="language-plaintext highlighter-rouge">Person</code> 인스턴스와 <code class="language-plaintext highlighter-rouge">Apartment</code> 인스턴스의 참조를 끊어도 참조 횟수가 0으로 떨어지지 않는다.</p>

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">john</span> <span class="o">=</span> <span class="kc">nil</span>
<span class="n">unit4A</span> <span class="o">=</span> <span class="kc">nil</span>
</code></pre></div></div>

<p><img src="https://docs.swift.org/swift-book/_images/referenceCycle03_2x.png" alt="referenceCycle03" /></p>

<p>이러한 강한 순환 참조를 해결하려면 속성을 <code class="language-plaintext highlighter-rouge">weak</code> 키워드를 이용해 약한 참조를 한다.</p>

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">class</span> <span class="kt">Apartment</span> <span class="p">{</span>
    <span class="k">let</span> <span class="nv">unit</span><span class="p">:</span> <span class="kt">String</span>
    <span class="nf">init</span><span class="p">(</span><span class="nv">unit</span><span class="p">:</span> <span class="kt">String</span><span class="p">)</span> <span class="p">{</span> <span class="k">self</span><span class="o">.</span><span class="n">unit</span> <span class="o">=</span> <span class="n">unit</span> <span class="p">}</span>
    <span class="k">weak</span> <span class="k">var</span> <span class="nv">tenant</span><span class="p">:</span> <span class="kt">Person</span><span class="p">?</span>
    <span class="kd">deinit</span> <span class="p">{</span> <span class="nf">print</span><span class="p">(</span><span class="s">"Apartment </span><span class="se">\(</span><span class="n">unit</span><span class="se">)</span><span class="s"> is being deinitialized"</span><span class="p">)</span> <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<hr />

<h2 id="참고-자료">참고 자료</h2>

<ul>
  <li><a href="https://docs.swift.org/swift-book/LanguageGuide/AutomaticReferenceCounting.html">Automatic Reference Counting - The Swift Programming Language (Swift 5.3)</a></li>
</ul>
:ET