I"N5<p>옵셔널 체이닝 등 일부 빠진 개념은 좀 더 공부하고서 채울 예정</p>

<p>스위프트에서는 <code class="language-plaintext highlighter-rouge">NULL</code> 을 <code class="language-plaintext highlighter-rouge">nil</code> 로 표기한다.</p>

<p>스위프트를 처음 접하면서 가장 먼저 만나는 생소한 문법은 <code class="language-plaintext highlighter-rouge">Optional</code> 이 아닐까 생각한다. 코틀린에는 <code class="language-plaintext highlighter-rouge">Nullable</code> 이라는 개념이 있지만 내가 주로 사용했던 자바나 파이썬에는 없는 문법이었다. (Java8 부터 도입되었다.)
자바(혹은 다른 언어)에서 사용했던 것 처럼 스위프트에서 <code class="language-plaintext highlighter-rouge">nil</code>을 사용하면  <code class="language-plaintext highlighter-rouge">Xcode</code>에서는 무수한 빨간 줄이 반긴다. 그리고 고치긴 해야하니까 영문도 모른 체 Fix를 눌러서 고친다. 다들 이런 경험 한번 쯤은 있을 거다.</p>

<p>얄팍한 지식과, 좋은 자료들을 읽으면서 정리해봤다. 모쪼록 누군가에게는 도움이 되길 바라며, 잘못된 지식은 댓글로 남겨주시면 감사하겠습니다.</p>

<p>일단, Optional에 대해서 알아보자.</p>

<p><a href="https://docs.swift.org/swift-book/LanguageGuide/TheBasics.html#ID330">The Swift Programming Language (Swift 5.3)</a> 페이지에서 Optional을 이렇게 설명한다.</p>

<blockquote>
  <p>You use optionals in situations where a value may be absent. An optional represents two possibilities: Either there is a value, and you can unwrap the optional to access that value, or there isn’t a value at all.</p>
</blockquote>

<blockquote>
  <p>값이 없을 수 있는 상황에서 옵셔널을 사용합니다. 옵셔널은 두가지 가능성을 나타낸다: 값이 있고 옵셔널을 풀어서 해당 값에 액세스할 수 있거나 값이 전혀 없는 경우.</p>
</blockquote>

<h2 id="옵셔널-변수또는-상수를-만드는-법">옵셔널 변수(또는 상수)를 만드는 법</h2>

<hr />

<p><code class="language-plaintext highlighter-rouge">Int</code>형 변수를 만든다고 해보자. 우리는 모종의 이유로 변수를 생성하고 나중에 값을 초기화해주고 싶다. 그리고 이러한 상황을 파이썬으로 작성한다면 다음과 같다.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">num</span> <span class="o">=</span> <span class="bp">None</span>
<span class="n">num</span> <span class="o">=</span> <span class="mi">7</span>
<span class="k">print</span><span class="p">(</span><span class="n">num</span><span class="p">)</span> <span class="c1"># 7
</span></code></pre></div></div>

<p>나중에 넣은 7이 잘 출력되는 걸 확인할 수 있다. 똑같이 스위프트로 작성하면 어떨까?</p>

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">var</span> <span class="nv">num</span><span class="p">:</span> <span class="kt">Int</span> <span class="o">=</span> <span class="kc">nil</span> <span class="c1">// 🛑 'nil' cannot initialize specified type 'Int'</span>
<span class="n">num</span> <span class="o">=</span> <span class="mi">7</span>
<span class="nf">print</span><span class="p">(</span><span class="n">num</span><span class="p">)</span>
</code></pre></div></div>

<p>스위프트는 <code class="language-plaintext highlighter-rouge">nil</code>에 대해서 엄격한 편이다. 그래서 우리가 평소에 다른 언어에서 사용하던 것처럼 변수 생성 시 <code class="language-plaintext highlighter-rouge">nil</code>을 넣고 나중에 초기화 하려고 하면 <code class="language-plaintext highlighter-rouge">Xcode</code>에서는 <code class="language-plaintext highlighter-rouge">'nil' cannot initialize specified type 'Int'</code> 이라는 문구와 함께 빨간줄이 뜬다.</p>

<p>위 상황처럼 일반 변수에 <code class="language-plaintext highlighter-rouge">nil</code>을 할당하려고 하면, 컴파일 오류가 우리를 반긴다. 스위프트에서는 옵셔널 변수(상수)가 아니면 <code class="language-plaintext highlighter-rouge">nil</code>을 할당할 수 없다.</p>

<p>옵셔널 변수(상수)를 생성하고 <code class="language-plaintext highlighter-rouge">nil</code>을 할당해보자. 타입 뒤에 <code class="language-plaintext highlighter-rouge">?</code>를 붙이면 된다.</p>

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">var</span> <span class="nv">num</span><span class="p">:</span> <span class="kt">Int</span><span class="p">?</span> <span class="o">=</span> <span class="kc">nil</span>
<span class="n">num</span> <span class="o">=</span> <span class="mi">7</span>
<span class="nf">print</span><span class="p">(</span><span class="n">num</span><span class="p">)</span> <span class="c1">// Optional(7)</span>
</code></pre></div></div>

<p><code class="language-plaintext highlighter-rouge">num</code>변수에 7을 넣고 출력을 해보니 출력이 되긴 하는데, 뭔가 이상하다. 값이 <code class="language-plaintext highlighter-rouge">Optional()</code>로 감싸져서 출력된다. 이제, 옵셔널 값을 과일 깎듯 알맹이만 뽑아내는 방법을 알아보자.</p>

<h2 id="강제-추출forced-unwrapping">강제 추출(Forced Unwrapping)</h2>

<hr />

<p>옵셔널 값을 강제로 추출하려면 옵셔널 값 뒤에 <code class="language-plaintext highlighter-rouge">!</code>를 붙인다. 이 방법은 확실하지만 위험하다. 벗겨내려는 옵셔널이 값이 있다면 문제가 없겠지만, 값이 없는 상황이라면 오류가 우리를 반긴다.</p>

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">var</span> <span class="nv">num</span><span class="p">:</span> <span class="kt">Int</span><span class="p">?</span> <span class="o">=</span> <span class="mi">7</span>
<span class="k">if</span> <span class="n">num</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
	<span class="nf">print</span><span class="p">(</span><span class="s">"num is </span><span class="se">\(</span><span class="n">num</span><span class="o">!</span><span class="se">)</span><span class="s">"</span><span class="p">)</span> <span class="c1">// num is 7</span>
<span class="p">}</span>
</code></pre></div></div>

<p>가급적이면 사용하지 않고, 혹시라도 쓰게 된다면 <strong>반드시 값이 있음을 보장하는 상황에서만</strong> 쓰자.</p>

<h2 id="옵셔널-바인딩optional-binding---if">옵셔널 바인딩(Optional Binding) - if</h2>

<hr />

<p>옵셔널 바인딩은 옵셔널 변수(상수)에 값이 있는지 확인하고, 해당 값을 임시 변수(상수)에 할당해서 사용하는 기법이다. <code class="language-plaintext highlighter-rouge">if</code>문이나 <code class="language-plaintext highlighter-rouge">while</code>문과 함께 사용된다.</p>

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">func</span> <span class="nf">output</span><span class="p">(</span><span class="n">_</span> <span class="nv">myName</span><span class="p">:</span> <span class="kt">String</span><span class="p">?)</span> <span class="p">{</span>
	<span class="k">if</span> <span class="k">let</span> <span class="nv">name</span> <span class="o">=</span> <span class="n">myName</span> <span class="p">{</span>
		<span class="nf">print</span><span class="p">(</span><span class="s">"my name is </span><span class="se">\(</span><span class="n">name</span><span class="se">)</span><span class="s">"</span><span class="p">)</span>
	<span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
		<span class="nf">print</span><span class="p">(</span><span class="s">"unknown name"</span><span class="p">)</span>
	<span class="p">}</span>
<span class="p">}</span>

<span class="k">var</span> <span class="nv">myName</span><span class="p">:</span> <span class="kt">String</span><span class="p">?</span> <span class="o">=</span> <span class="s">"지원"</span>
<span class="nf">output</span><span class="p">(</span><span class="n">myName</span><span class="p">)</span> <span class="c1">// my name is 지원</span>
</code></pre></div></div>

<p><code class="language-plaintext highlighter-rouge">if</code>문에서 생성한 임시 상수 <code class="language-plaintext highlighter-rouge">name</code>은 <code class="language-plaintext highlighter-rouge">if</code>문 내부에서만 사용할 수 있다.</p>

<p>위와 같은 상황을 <code class="language-plaintext highlighter-rouge">guard</code>문을 이용해서 처리할 수도 있다.</p>

<h2 id="옵셔널-바인딩optional-binding---guard">옵셔널 바인딩(Optional Binding) - guard</h2>

<hr />

<p><code class="language-plaintext highlighter-rouge">guard</code>문에 있는 조건이 <code class="language-plaintext highlighter-rouge">false</code>인 경우에는 <code class="language-plaintext highlighter-rouge">guard</code>문 내부로 진입하고, <code class="language-plaintext highlighter-rouge">true</code>인 경우에는 바깥 코드를 진행한다.</p>

<p><code class="language-plaintext highlighter-rouge">if</code>문으로 생성한 임시 상수는 <code class="language-plaintext highlighter-rouge">if</code>문 내부에서만 사용할 수 있지만, <code class="language-plaintext highlighter-rouge">guard</code>문으로 생성한 상수는 <code class="language-plaintext highlighter-rouge">guard</code>구문이 끝나고 난 뒤부터 함수 내부의 지역 상수처럼 사용할 수 있다.</p>

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">func</span> <span class="nf">output</span><span class="p">(</span><span class="n">_</span> <span class="nv">name</span><span class="p">:</span> <span class="kt">String</span><span class="p">?)</span> <span class="p">{</span>
	<span class="k">guard</span> <span class="k">let</span> <span class="nv">name</span> <span class="o">=</span> <span class="n">myName</span> <span class="k">else</span> <span class="p">{</span>
		<span class="nf">print</span><span class="p">(</span><span class="s">"unknown name"</span><span class="p">)</span>
		<span class="k">return</span>
	<span class="p">}</span>
	<span class="nf">print</span><span class="p">(</span><span class="s">"my name is </span><span class="se">\(</span><span class="n">name</span><span class="se">)</span><span class="s">"</span><span class="p">)</span>
<span class="p">}</span>

<span class="k">var</span> <span class="nv">myName</span><span class="p">:</span> <span class="kt">String</span><span class="p">?</span> <span class="o">=</span> <span class="kc">nil</span>
<span class="nf">output</span><span class="p">(</span><span class="n">myName</span><span class="p">)</span> <span class="c1">// unknown name</span>
</code></pre></div></div>

<p><code class="language-plaintext highlighter-rouge">guard</code>문 내부의 끝에는 <code class="language-plaintext highlighter-rouge">return</code>, <code class="language-plaintext highlighter-rouge">break</code>, <code class="language-plaintext highlighter-rouge">continue</code>, <code class="language-plaintext highlighter-rouge">throw</code>가 포함되어야 한다.</p>

<h2 id="nil-coalescing-operator---">Nil-Coalescing Operator - ??</h2>

<p><code class="language-plaintext highlighter-rouge">??</code>연산자는 값이 포함되어 있는 경우에는 옵셔널을 벗긴 값을 반환하고, 없는 경우에는 default 값을 설정해줄 수 있다.</p>

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">var</span> <span class="nv">myNickname</span><span class="p">:</span> <span class="kt">Int</span><span class="p">?</span> <span class="o">=</span> <span class="kc">nil</span>
<span class="k">let</span> <span class="nv">nickname</span> <span class="o">=</span> <span class="n">myNickname</span> <span class="p">??</span> <span class="s">"먹구름"</span>
<span class="nf">print</span><span class="p">(</span><span class="n">nickname</span><span class="p">)</span> <span class="c1">// "먹구름"</span>
</code></pre></div></div>

<h2>!!</h2>

<p><a href="https://stackoverflow.com/questions/31467510/double-exclamation-mark-in-swift">Double exclamation !! mark in Swift?</a> 이라는 스택오버플로우 글을 보면, <code class="language-plaintext highlighter-rouge">Optional(Optional(value))</code>와 같이 이중으로 포장 되어있는 상황에서 사용하는 거 같지만, 더 자세한 자료는 찾지 못해서 일단 이 부분은 좀 더 찾아보는 걸로….</p>

<hr />

<h2 id="참고-자료">참고 자료</h2>

<ul>
  <li><a href="https://docs.swift.org/swift-book/LanguageGuide/TheBasics.html#ID330">The Swift Programming Language (Swift 5.3)</a></li>
  <li><a href="http://www.kyobobook.co.kr/product/detailViewKor.laf?ejkGb=KOR&amp;mallGb=KOR&amp;barcode=9791162242223&amp;orderClick=LEa&amp;Kc=">스위프트 프로그래밍: Swift 5</a></li>
  <li><a href="https://velog.io/@dev-lena/guard-let과-if-let의-차이점">guard let과 if let의 차이점</a></li>
  <li><a href="https://www.programiz.com/swift-programming/guard-statement">Swift guard statement</a></li>
</ul>
:ET